import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import * as secp from "noble-secp256k1";
import { useEffect, useState } from 'react';


function bytesToHex(uint8a: any) {
  let hex = '';
  for (let i = 0; i < uint8a.length; i++) {
      hex += uint8a[i].toString(16).padStart(2, '0');
  }
  return hex;
}

function hexToBytes(hex) {
  if (typeof hex !== 'string') {
      throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
  }
  if (hex.length % 2)
      throw new Error('hexToBytes: received invalid unpadded hex');
  const array = new Uint8Array(hex.length / 2);
  for (let i = 0; i < array.length; i++) {
      const j = i * 2;
      array[i] = Number.parseInt(hex.slice(j, j + 2), 16);
  }
  return array;
}

export default function Home() {
  const [privateKey, setPrivateKey] = useState<string>();
  const [publicKey, setPublicKey] = useState<string>();
  const [toAddress, setToAddress] = useState<string>();
  const [amount, setAmount] = useState<number>(0);
  const [fee, setFee] = useState<number>(0);
  const [nonce, setNonce] = useState<number>(0);
  const [sig, setSig] = useState<string>();


  useEffect(() => {
    if(privateKey){
      try{
        setPublicKey(secp.getPublicKey(privateKey));
      }
      catch(err) {
        console.log(err);
        setPublicKey(undefined);
      }
    }
  }, [privateKey]);


  const genSig = async () => {
    if(!privateKey || !toAddress){
      setSig(undefined);
      return;
    }
    const a = {  
      "from_adr": publicKey, 
      "to_adr": toAddress,
      "amt": amount,
      "fee": fee, 
      "nonce": nonce,
    }
    const json_string = JSON.stringify(a);
    console.log(json_string);
    const signature = await secp.sign(json_string, privateKey);
    setSig(signature);
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Sheesh Coin</title>
        <meta name="description" content="Generated by nibnalin and adhyyan" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main} >
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Private Key</span> 
            <a href="#" onClick={() => setPrivateKey(bytesToHex(secp.utils.randomPrivateKey()))}className="label-text-alt">
                  Generate new private key
                </a>
          </label> 
          <input value={privateKey} onChange={x => setPrivateKey(x.target.value)} type="text" placeholder="privatekey" className="input input-primary input-bordered" />
        </div> 
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Public Key</span>
          </label> 
          <input value={publicKey} type="text" placeholder="username" className="input input-secondary input-bordered" />
        </div> 
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Public key to</span>
          </label> 
          <input value={toAddress} onChange={x => setToAddress(x.target.value)} type="text" placeholder="username" className="input input-accent input-bordered" />
        </div>
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Amount</span>
          </label> 
          <input value={amount} onChange={x => setAmount(parseInt(x.target.value, 10))} type="number" placeholder="username" className="input input-accent input-bordered" />
        </div>
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Fee</span>
          </label> 
          <input value={fee} onChange={x => setFee(parseInt(x.target.value, 10))} type="number" placeholder="username" className="input input-accent input-bordered" />
        </div>
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Nonce</span>
          </label> 
          <input value={nonce} onChange={x => setNonce(parseInt(x.target.value, 10))} type="number" placeholder="username" className="input input-accent input-bordered" />
        </div>
        <button onClick={genSig} className="btn btn-primary">Generate Signature</button>
        <div className="form-control w-full">
          <label className="label">
            <span className="label-text">Signature</span>
          </label> 
          <input type="text" placeholder="username" className="input input-accent input-bordered" />
        </div>
      </main>

      <footer className={styles.footer}>
          Made by nibnalin and adhyyan.
      </footer>
    </div>
  )
}
